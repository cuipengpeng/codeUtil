静态代码块中使用BuildConfig.DEBUG自动切换服务器地址。依赖gradle配置布尔debug变量，自动切换其他数据
CRUD操作中除了get操作，其他操作都要防止表单重复提交.即防止button重复点击。
网络请求参数Context：用以token失效的页面跳转，或弹出对话框
网络请求响应自定义回调，实现代理.过滤器模式
函数参数：tag.id
app多版本兼容：接口地址v1/v2路径
强制更新.灰度发布(优先级排序：版本号，渠道号，imei号，登陆后的userId、手机型号、生产商vender)
版本管理.分值管理：
master(线上)--release(预发布)--test.dev(测试)
master-->hotfix(热修复)
网络安全：防攻击：签名校验+token校验(ORC图片验证码->短信验证码倒计时)  数据加密：对称加密和非对称加密 排序用treemap 还是compatle，连连支付？ NDK.so库的封装
代码安全：混淆.加固
所有输入框用正则表达式校验
如何防止崩溃日志重复上传？
多线程下载+断点续传--文件上传.断网处理？
文件hasdcode获取
测试环境手动指定服务器地址：便于服务器端问题调试
标准化，自动化，参数化

架构设计：既支持默认统一处理，又支持自定义处理



扫描二维码

所有请求都加token和版本号：
token用于单设备登陆，
版本号用于强制更新：登陆一定要检查版本更新
与页面生命周期相关的Http请求放baseactivity里用tag统一管理。后台下载请求的除外。
ijk播放视频时包含缩略图的控制层只能new出来，因为一个view只能有一个父容器

http://blog.csdn.net/lmj623565791/article/details/43452969
所有请求都传版本号，便于服务器端调试错误
版本更新，各版本的兼容性：应用启动时，用户登录时
单设备登录.验证请求的合法性：device_token、token
整个应用初始化时的开发.测试.预发.线上环境初始化
debug 版和release版
渠道号、来源市场


hashmap数据结构：数组和链表
hashmap如何解决冲突？
HashMap扩容：hash数组的默认大小是16，而且一定是2的指数。负载因子0.75，扩容方式resize：length*2

https://www.jianshu.com/p/14cd2c9d2cd2
https通信流程及原理：
一个HTTPS请求实际上包含了两次HTTP传输，可以细分为8步：
HTTPS在传输的过程中会涉及到三个密钥：
服务器端的公钥和私钥，用来进行非对称加密
客户端生成的随机密钥，用来进行对称加密
1.客户端向服务器发起HTTPS请求，连接到服务器的443端口
2.服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。
3.服务器将自己的公钥发送给客户端。
4.客户端收到服务器端的公钥之后，会对公钥进行检查，验证其合法性，如果发现发现公钥有问题，那么HTTPS传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性，关于客户端如何验证数字证书的合法性，下文会进行说明。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS中的第一次HTTP请求结束。
5.客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。
6.服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。
7.然后服务器将加密后的密文发送给客户端。
8.客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。

https图片
对称加密速度快.加密数据长度无限制，非对称加密速度慢.加密数据长度有限(分块加密除外)
对称加密加密数据，非对称加密加密摘要

java虚拟机垃圾回收算法：1.标记-清除算法、2.复制算法、3.标记-整理算法、4.分代收集算法(年轻代，老年代，永久代)

https://www.jianshu.com/p/5c676d76f3a3
图.即矩阵的深度优先搜索和广度优先遍历
https://www.cnblogs.com/luoxiaoyi/p/10073154.html


面试题：
http://www.jackywang.tech/AndroidInterview-Q-A/interview/view%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B-%E7%99%BE%E5%BA%A6.html
http://www.jackywang.tech/AndroidInterview-Q-A/interview/hashmap%E5%92%8Chashtable%E7%9A%84%E5%8C%BA%E5%88%AB-%E4%B9%90%E8%A7%86-%E5%B0%8F%E7%B1%B3.html



